import com.sun.org.apache.bcel.internal.generic.ARRAYLENGTH;import org.apache.poi.hssf.usermodel.HSSFWorkbook;import org.apache.poi.ss.usermodel.*;import org.apache.poi.ss.util.CellRangeAddress;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.OutputStream;import java.text.SimpleDateFormat;import java.util.*;/** * @author: jt * @date: 2018-9-17 */public class WeekExcelExportUtil {    private static final String[] days = {            "周一", "周二",            "周三", "周四", "周五", "周六","周日"};    private static final String[]  time = {            "上午", "下午"};    public static void main(String[] args) {        try {            Calendar startDate = Calendar.getInstance();            Calendar endDate = Calendar.getInstance();            startDate.set(2018,9,17);            endDate.set(2018,9,23);            ArrayList<String> list = new ArrayList<String>();            list.add("xiaoming");            list.add("xiaohong");            FileOutputStream out = new FileOutputStream("D:/poi_comment.xls");            Map<String, Object> map = new HashMap<String,Object>();            export(startDate.getTime(),endDate.getTime(),list,map,out);        } catch (Exception e) {            e.printStackTrace();        }    }    public static void export(Date startDate, Date endDate, List<String> leaders,Map<String, Object> map, OutputStream out) throws Exception {        Calendar calendar = Calendar.getInstance();        Workbook wb = new HSSFWorkbook();        Map<String, CellStyle> styles = createStyles(wb);        //TODO:设置月份        //create a sheet for each month        //设置月份        Sheet sheet = wb.createSheet("活动");        //turn off gridlines        sheet.setDisplayGridlines(false);        sheet.setPrintGridlines(false);        sheet.setFitToPage(true);        sheet.setHorizontallyCenter(true);        PrintSetup printSetup = sheet.getPrintSetup();        printSetup.setLandscape(true);        //the following three statements are required only for HSSF        sheet.setAutobreaks(true);        printSetup.setFitHeight((short) 1);        printSetup.setFitWidth((short) 1);        //the header row: centered text in 48pt font        Row headerRow = sheet.createRow(0);        headerRow.setHeightInPoints(30);        Cell titleCell = headerRow.createCell(0);        //设置标题        SimpleDateFormat sdf = new SimpleDateFormat("YYYY年MM月dd日");        String title = sdf.format(startDate)+"~"+sdf.format(endDate);        titleCell.setCellValue(title);        titleCell.setCellStyle(styles.get("title"));        sheet.addMergedRegion(new CellRangeAddress(0,0,0,leaders.size()+2));        //header with month titles        Row secondRow = sheet.createRow(1);        List<String> headerRowList=new ArrayList<String>();        headerRowList.add("日期");        headerRowList.add("周");        headerRowList.addAll(leaders);        for (int i = 0; i < headerRowList.size(); i++) {            sheet.setColumnWidth(i, 13 * 256); //the column is 13 characters wide            //sheet.addMergedRegion(new CellRangeAddress(1, 1, i * 2, i * 2 + 1));            Cell cell = secondRow.createCell(i);            cell.setCellValue(headerRowList.get(i));            cell.setCellStyle(styles.get("month"));        }        int cnt = 1, day = 1;        int rownum = 2;        for (int j = 0; j < 14; j++) {            Row row = sheet.createRow(rownum++);            row.setHeightInPoints(80);            for (int i = 0; i < leaders.size()+2; i++) {                if(i==0){                    if(rownum%2==1){                        Cell cell = row.createCell(i);                        cell.setCellValue(days[j/2]);                        sheet.addMergedRegion(new CellRangeAddress(rownum-1,rownum,0,0));                        cell.setCellStyle(styles.get("workday_left"));                        continue;                    }else{                        continue;                    }                }                if(i==1){                    Cell cell = row.createCell(i);                    cell.setCellValue(time[j%2]);                        cell.setCellStyle(styles.get("workday_left"));                        continue;                }                for (Cell cell : row) {                }            }            //if (calendar.get(Calendar.MONTH) > month) break;        }        // Write the output to a file        String file = "calendar.xls";        if (wb instanceof HSSFWorkbook) file += "x";        wb.write(out);    }    /**     * cell styles used for formatting calendar sheets     */    private static Map<String, CellStyle> createStyles(Workbook wb){        Map<String, CellStyle> styles = new HashMap<String, CellStyle>();        short borderColor = IndexedColors.GREY_50_PERCENT.getIndex();        CellStyle style;        Font titleFont = wb.createFont();        titleFont.setFontHeightInPoints((short)20);        titleFont.setColor(IndexedColors.DARK_BLUE.getIndex());        style = wb.createCellStyle();        style.setAlignment(HorizontalAlignment.CENTER);        style.setVerticalAlignment(VerticalAlignment.CENTER);        style.setFont(titleFont);        styles.put("title", style);        Font monthFont = wb.createFont();        monthFont.setFontHeightInPoints((short)12);        monthFont.setColor(IndexedColors.WHITE.getIndex());        monthFont.setBold(true);        style = wb.createCellStyle();        style.setAlignment(HorizontalAlignment.CENTER);        style.setVerticalAlignment(VerticalAlignment.CENTER);        style.setFillForegroundColor(IndexedColors.DARK_BLUE.getIndex());        style.setFillPattern(FillPatternType.SOLID_FOREGROUND);        style.setFont(monthFont);        styles.put("month", style);        Font dayFont = wb.createFont();        style = wb.createCellStyle();        style.setAlignment(HorizontalAlignment.CENTER);        style.setVerticalAlignment(VerticalAlignment.CENTER);        style.setBorderLeft(BorderStyle.THIN);        style.setFillForegroundColor(IndexedColors.WHITE.getIndex());        style.setFillPattern(FillPatternType.SOLID_FOREGROUND);        style.setLeftBorderColor(borderColor);        style.setBorderBottom(BorderStyle.THIN);        style.setBottomBorderColor(borderColor);        style.setFont(dayFont);        style.setTopBorderColor(borderColor);        style.setBorderLeft(BorderStyle.THIN);        //style.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());        styles.put("workday_left", style);        return styles;    }}